#!/usr/bin/env php
<?php
namespace PMStats;

$command_name = 'stats_lang';
$command_help = "{$command_name} - Get stats for all lang files in a folder\n" .
                "Usage: {$command_name} [path]\n\n" .
                "Example: {$command_name} ~/git/appstores\n";
$min_parameters = 1;
$missing_parameter = "This command needs more parameters, please check {$command_name} --help.\n";
require_once __DIR__ . '/../inc/cli_init.php';

// User provided variables
$cli_path = Utils::getCliParam(1, $argv, '');

function getDirContents($dir, &$results = array()){
    $files = scandir($dir);

    foreach($files as $key => $value){
        $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
        if(! is_dir($path)) {
            $ext = pathinfo($path, PATHINFO_EXTENSION);
            if ($ext == 'lang') {
                $results[] = $path;
            }
        } else if($value != "." && $value != "..") {
            getDirContents($path, $results);
        }
    }

    return $results;
};

$get_words = function ($item) {
    return str_word_count(strip_tags($item));
};

$changesets = Utils::getChangesets($cli_path, 'en-US/');

$previous_cache = [];
$stats = [];
foreach ($changesets as $day => $changeset) {
    exec("git checkout {$changeset}");

    # Initialize stats
    $stats[$day] = [
        'added'     => 0,
        'added_w'   => 0,
        'removed'   => 0,
        'removed_w' => 0,
        'total'     => 0,
        'total_w'   => 0,
    ];

    $file_list = getDirContents($cli_path . '/en-US/');

    # Create cache of strings
    $cache = [];
    foreach ($file_list as $current_filename) {
        $file_content = DotLangParser::parseFile($current_filename);
        foreach ($file_content['strings'] as $string_id => $string_value) {
            $id = $current_filename . ':' . hash('md5', $string_id);
            $cache[$id] = $string_value;
        }
        $stats[$day]['total'] += count($file_content['strings']);
        $stats[$day]['total_w'] += array_sum(array_map($get_words, $file_content['strings']));
    }

    # First run, there are no added or remove
    if (empty($previous_cache)) {
        $previous_cache = $cache;
        continue;
    }

    # Count removed strings
    $removed_strings = array_diff_key($previous_cache, $cache);
    foreach ($removed_strings as $string_id => $text) {
        $stats[$day]['removed_w'] += $get_words($text);
    }
    $stats[$day]['removed'] += count($removed_strings);

    # Count added strings
    $added_strings = array_diff_key($cache, $previous_cache);
    foreach ($added_strings as $string_id => $text) {
        $stats[$day]['added_w'] += $get_words($text);
    }
    $stats[$day]['added'] += count($added_strings);

    # Store current cache as previous cache and move on
    $previous_cache = $cache;
}

$overall_stats = [];
foreach ($stats as $day => $data) {
    $year = substr($day, 0, 4);
    if (! isset($overall_stats[$year])) {
        $overall_stats[$year] = [
            'added'     => 0,
            'added_w'   => 0,
            'removed'   => 0,
            'removed_w' => 0,
            'total'     => 0,
            'total_w'   => 0,
        ];
    } else {
        $overall_stats[$year]['added'] += $data['added'];
        $overall_stats[$year]['added_w'] += $data['added_w'];
        $overall_stats[$year]['removed'] += $data['removed'];
        $overall_stats[$year]['removed_w'] += $data['removed_w'];
        $overall_stats[$year]['total'] = $data['total'];
        $overall_stats[$year]['total_w'] = $data['total_w'];
    }
}

echo "Total number of strings at the end of the period, number of words between parenthesis.\n";
foreach ($overall_stats as $year => $data) {
    echo "{$year}: {$data['total']} ({$data['total_w']}) total, "
         . "{$data['added']} ({$data['added_w']}) added, "
         . "{$data['removed']} ({$data['removed_w']}) removed.\n";
}
